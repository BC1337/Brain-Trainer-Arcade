import { c as create_ssr_component, v as validate_component, e as escape, b as add_attribute } from "../../../chunks/ssr.js";
import { L as Layout } from "../../../chunks/Layout.js";
const css = {
  code: '.wrapper.svelte-1ssikdm.svelte-1ssikdm{position:relative;display:flex;justify-content:center;align-items:center;height:100vh;background-color:#1a1a1a;color:#fff}.play-area-wrapper.svelte-1ssikdm.svelte-1ssikdm{position:relative;display:flex;justify-content:center;align-items:center;width:100%}.play-area-controls.svelte-1ssikdm.svelte-1ssikdm{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);z-index:2}.settings-container.svelte-1ssikdm.svelte-1ssikdm{color:#fff;border-radius:5px;padding:20px}.settings-hidden.svelte-1ssikdm.svelte-1ssikdm{display:none}.play-area.svelte-1ssikdm.svelte-1ssikdm{border:2px solid white;cursor:pointer;max-width:1000px;min-width:365px;max-height:75vh;margin-top:20px}.start-game-button.svelte-1ssikdm.svelte-1ssikdm,.apply-settings-button.svelte-1ssikdm.svelte-1ssikdm{padding:10px 20px;font-size:16px;border:none;background-color:#4caf50;color:#fff;cursor:pointer;border-radius:5px;transition:background-color 0.3s ease;margin-top:10px}.start-game-button.svelte-1ssikdm.svelte-1ssikdm:hover,.apply-settings-button.svelte-1ssikdm.svelte-1ssikdm:hover{background-color:#45a049}.modal.svelte-1ssikdm.svelte-1ssikdm{display:none;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);background-color:rgba(0, 0, 0, 0.8);color:white;padding:20px;border-radius:10px}.modal-content.svelte-1ssikdm.svelte-1ssikdm{text-align:center}.settings-popup.svelte-1ssikdm.svelte-1ssikdm{display:block}.settings-popup.svelte-1ssikdm label.svelte-1ssikdm{display:block;margin-bottom:10px}.settings-popup.svelte-1ssikdm input[type="range"].svelte-1ssikdm{width:100%}.settings-popup.svelte-1ssikdm .apply-settings-button.svelte-1ssikdm{width:100%}',
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy } from \\"svelte\\";\\n  import Layout from \\"../../layouts/Layout.svelte\\";\\n\\n  let playAreaWidth;\\n  let playAreaHeight;\\n  const minWidth = 365;\\n  const maxWidth = 1000;\\n  const screenHeightPercentage = 0.75;\\n  const minHeight = 0;\\n\\n  let gameStarted = false;\\n  let firstGameStarted = false;  // New flag to track if the first game has started\\n  let timer = 10;\\n  let successfulClicks = 0;\\n  let missedClicks = 0;\\n  let totalClicks = 0;\\n  let accuracy = 0;\\n  let gameEnded = false;\\n  let targetX;\\n  let targetY;\\n  let targetSize = 25;\\n  let roundLength = 10;\\n\\n  let canvas;\\n\\n  const isBrowser = typeof window !== 'undefined';\\n\\n  onMount(() => {\\n    if (isBrowser) {\\n      canvas = document.getElementById('play-area');\\n      resizeCanvas();\\n      window.addEventListener('resize', resizeCanvas);\\n    }\\n    return () => {\\n      if (isBrowser) {\\n        window.removeEventListener('resize', resizeCanvas);\\n      }\\n    };\\n  });\\n\\n  const resizeCanvas = () => {\\n    playAreaWidth = Math.max(minWidth, Math.min(window.innerWidth * 0.9, maxWidth));\\n    playAreaHeight = Math.max(window.innerHeight * screenHeightPercentage, minHeight);\\n    if (canvas) {\\n      canvas.width = playAreaWidth;\\n      canvas.height = playAreaHeight;\\n      if (gameStarted) {\\n        const ctx = canvas.getContext('2d');\\n        generateTarget(ctx);\\n      }\\n    }\\n  };\\n\\n  const startGame = () => {\\n    gameStarted = true;\\n    firstGameStarted = true;  // Mark the first game as started\\n    gameEnded = false;\\n    successfulClicks = 0;\\n    missedClicks = 0;\\n    totalClicks = 0;\\n    accuracy = 0;\\n    timer = roundLength;\\n    hideModal();\\n    startTimer();\\n    setTimeout(() => {\\n      const ctx = canvas.getContext('2d');\\n      generateTarget(ctx);\\n    }, 100);\\n  };\\n\\n  const hideModal = () => {\\n    const modal = document.getElementById('game-modal');\\n    modal.style.display = 'none';\\n  };\\n\\n  const generateTarget = (ctx) => {\\n    if (gameStarted && ctx) {\\n      targetX = Math.random() * (playAreaWidth - targetSize * 2);\\n      targetY = Math.random() * (playAreaHeight - targetSize * 2);\\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\\n      ctx.beginPath();\\n      ctx.arc(targetX, targetY, targetSize, 0, 2 * Math.PI);\\n      ctx.fillStyle = 'red';\\n      ctx.fill();\\n      ctx.closePath();\\n    }\\n  };\\n\\n  const handleTargetClick = (event) => {\\n    if (gameStarted && canvas) {\\n      const ctx = canvas.getContext('2d');\\n      const { offsetX, offsetY } = event;\\n      const distance = Math.sqrt((offsetX - targetX) ** 2 + (offsetY - targetY) ** 2);\\n      totalClicks++;\\n      if (distance <= targetSize) {\\n        successfulClicks++;\\n        generateTarget(ctx);\\n      } else {\\n        missedClicks++;\\n      }\\n      accuracy = (successfulClicks / totalClicks) * 100 || 0;\\n    }\\n  };\\n\\n  const startTimer = () => {\\n    const interval = setInterval(() => {\\n      if (timer > 0) {\\n        timer--;\\n      } else {\\n        clearInterval(interval);\\n        endGame();\\n      }\\n    }, 1000);\\n  };\\n\\n  const endGame = () => {\\n    gameEnded = true;\\n    gameStarted = false;\\n    const ctx = canvas.getContext('2d');\\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\\n    showStats();\\n  };\\n\\n  const showStats = () => {\\n    const modal = document.getElementById('game-modal');\\n    modal.style.display = 'block';\\n  };\\n\\n  const applySettings = () => {\\n    startGame();\\n  };\\n<\/script>\\n\\n<Layout>\\n  <div class=\\"wrapper\\">\\n    <div class=\\"play-area-wrapper\\">\\n      <div class=\\"play-area-controls\\">\\n        <div class=\\"settings-container {gameStarted || firstGameStarted ? 'settings-hidden' : ''}\\">\\n          <button class=\\"start-game-button\\" on:click={startGame}>Start Game</button>\\n        </div>\\n      </div>\\n      <canvas id=\\"play-area\\" class=\\"play-area\\" on:click={handleTargetClick}></canvas>\\n    </div>\\n    <div id=\\"game-modal\\" class=\\"modal\\">\\n      <div class=\\"modal-content\\">\\n        <div class=\\"settings-popup settings-visible\\">\\n          <h2>Game Stats</h2>\\n          <p>Successful Clicks: {successfulClicks}</p>\\n          <p>Total Clicks: {totalClicks}</p>\\n          <p>Accuracy: {accuracy.toFixed(2)}%</p>\\n          <label for=\\"modal-target-size\\">Target Size:</label>\\n          <input type=\\"range\\" id=\\"modal-target-size\\" min=\\"10\\" max=\\"50\\" bind:value={targetSize}>\\n          <label for=\\"modal-round-length\\">Round Length:</label>\\n          <input type=\\"range\\" id=\\"modal-round-length\\" min=\\"5\\" max=\\"60\\" bind:value={roundLength}>\\n          <button class=\\"apply-settings-button\\" on:click={applySettings}>Play Again?</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</Layout>\\n\\n<style>\\n  .wrapper {\\n  position: relative;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100vh;\\n  background-color: #1a1a1a;\\n  color: #fff;\\n}\\n\\n.play-area-wrapper {\\n  position: relative;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  width: 100%;\\n}\\n\\n.play-area-controls {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  z-index: 2;\\n}\\n\\n.settings-container {\\n  color: #fff;\\n  border-radius: 5px;\\n  padding: 20px;\\n}\\n\\n.settings-hidden {\\n  display: none;\\n}\\n\\n.play-area {\\n  border: 2px solid white;\\n  cursor: pointer;\\n  max-width: 1000px;\\n  min-width: 365px;\\n  max-height: 75vh;\\n  margin-top: 20px;\\n}\\n\\n.start-game-button, .apply-settings-button {\\n  padding: 10px 20px;\\n  font-size: 16px;\\n  border: none;\\n  background-color: #4caf50;\\n  color: #fff;\\n  cursor: pointer;\\n  border-radius: 5px;\\n  transition: background-color 0.3s ease;\\n  margin-top: 10px;\\n}\\n\\n.start-game-button:hover, .apply-settings-button:hover {\\n  background-color: #45a049;\\n}\\n\\n.modal {\\n  display: none;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  background-color: rgba(0, 0, 0, 0.8);\\n  color: white;\\n  padding: 20px;\\n  border-radius: 10px;\\n}\\n\\n.modal-content {\\n  text-align: center;\\n}\\n\\n.settings-popup {\\n  display: block;\\n}\\n\\n.settings-popup label {\\n  display: block;\\n  margin-bottom: 10px;\\n}\\n\\n.settings-popup input[type=\\"range\\"] {\\n  width: 100%;\\n}\\n\\n.settings-popup .apply-settings-button {\\n  width: 100%;\\n}\\n\\n</style>\\n"],"names":[],"mappings":"AAmKE,sCAAS,CACT,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,KAAK,CACb,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IACT,CAEA,gDAAmB,CACjB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,IACT,CAEA,iDAAoB,CAClB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,OAAO,CAAE,CACX,CAEA,iDAAoB,CAClB,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IACX,CAEA,8CAAiB,CACf,OAAO,CAAE,IACX,CAEA,wCAAW,CACT,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,MAAM,CACjB,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,IACd,CAEA,gDAAkB,CAAE,oDAAuB,CACzC,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,CACf,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,CACtC,UAAU,CAAE,IACd,CAEA,gDAAkB,MAAM,CAAE,oDAAsB,MAAO,CACrD,gBAAgB,CAAE,OACpB,CAEA,oCAAO,CACL,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IACjB,CAEA,4CAAe,CACb,UAAU,CAAE,MACd,CAEA,6CAAgB,CACd,OAAO,CAAE,KACX,CAEA,8BAAe,CAAC,oBAAM,CACpB,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,IACjB,CAEA,8BAAe,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,gBAAE,CAClC,KAAK,CAAE,IACT,CAEA,8BAAe,CAAC,qCAAuB,CACrC,KAAK,CAAE,IACT"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let successfulClicks = 0;
  let totalClicks = 0;
  let accuracy = 0;
  let targetSize = 25;
  let roundLength = 10;
  $$result.css.add(css);
  return `${validate_component(Layout, "Layout").$$render($$result, {}, {}, {
    default: () => {
      return `<div class="wrapper svelte-1ssikdm"><div class="play-area-wrapper svelte-1ssikdm"><div class="play-area-controls svelte-1ssikdm"><div class="${"settings-container " + escape("", true) + " svelte-1ssikdm"}"><button class="start-game-button svelte-1ssikdm" data-svelte-h="svelte-k93779">Start Game</button></div></div> <canvas id="play-area" class="play-area svelte-1ssikdm"></canvas></div> <div id="game-modal" class="modal svelte-1ssikdm"><div class="modal-content svelte-1ssikdm"><div class="settings-popup settings-visible svelte-1ssikdm"><h2 data-svelte-h="svelte-14y84rz">Game Stats</h2> <p>Successful Clicks: ${escape(successfulClicks)}</p> <p>Total Clicks: ${escape(totalClicks)}</p> <p>Accuracy: ${escape(accuracy.toFixed(2))}%</p> <label for="modal-target-size" class="svelte-1ssikdm" data-svelte-h="svelte-jpo3d9">Target Size:</label> <input type="range" id="modal-target-size" min="10" max="50" class="svelte-1ssikdm"${add_attribute("value", targetSize, 0)}> <label for="modal-round-length" class="svelte-1ssikdm" data-svelte-h="svelte-3syzf3">Round Length:</label> <input type="range" id="modal-round-length" min="5" max="60" class="svelte-1ssikdm"${add_attribute("value", roundLength, 0)}> <button class="apply-settings-button svelte-1ssikdm" data-svelte-h="svelte-hroeyo">Play Again?</button></div></div></div></div>`;
    }
  })}`;
});
export {
  Page as default
};
