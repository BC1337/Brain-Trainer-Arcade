import { c as create_ssr_component, v as validate_component, b as add_attribute, d as each } from "../../../chunks/ssr.js";
import { L as Layout } from "../../../chunks/Layout.js";
const css = {
  code: "h1.svelte-auze6x{color:#f0a500;text-align:center;margin-top:20px}.game-container.svelte-auze6x{display:flex;flex-direction:column;justify-content:center;align-items:center;padding:20px}.game-controls.svelte-auze6x{display:flex;align-items:center;margin-bottom:20px}.volume-control.svelte-auze6x{margin-right:10px}.mute-button.svelte-auze6x{background-color:transparent;border:none;font-size:24px;cursor:pointer}.game-board.svelte-auze6x{width:100%;max-width:400px;height:auto;display:flex;justify-content:center}.box-container.svelte-auze6x{display:grid;grid-template-columns:repeat(5, 1fr);gap:10px;width:100%}.box.svelte-auze6x{background-color:#ccc;border:1px solid #888;cursor:pointer;transition:background-color 0.3s ease;width:100%;padding-top:100%}.box.svelte-auze6x:hover{background-color:#ddd}.button-container.svelte-auze6x{margin-top:20px}button.svelte-auze6x{padding:10px 20px;font-size:16px;border:none;background-color:#d8ead8;color:#f0a500;cursor:pointer;border-radius:5px;transition:background-color 0.3s ease;margin-bottom:10px}button.svelte-auze6x:hover{background-color:rgb(241, 226, 205)}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount } from 'svelte';\\n  import Layout from \\"../../layouts/Layout.svelte\\";\\n\\n  let AudioConstructor;\\n\\n  // Check if running in the browser environment\\n  if (typeof window !== 'undefined') {\\n    // Import the Audio constructor dynamically\\n    AudioConstructor = window.Audio;\\n  }\\n\\n  // Continue with the rest of your component code\\n  // Define the game board size\\n  const gridSize = 5;\\n  const maxSoundIndex = 9; // Maximum sound index\\n  let currentSoundIndex = 1; // Initial sound index\\n\\n  // Initialize variables\\n  let sequence = [];\\n  let userSequence = [];\\n  let round = 0;\\n  let isActive = false;\\n  let showStartButton = true;\\n\\n  // Define sounds\\n  let correctSounds = [];\\n  let wrongSound;\\n\\n  let isMuted = false; // Initialize mute state\\n  let volumeLevel = 0.05; // Initial volume level\\n\\n  // Check if running in the browser environment\\n  if (typeof window !== 'undefined') {\\n    // Initialize sounds if running in the browser\\n    correctSounds = Array.from({ length: maxSoundIndex }, (_, i) => {\\n      const audio = new AudioConstructor(\`/GameSounds/game\${i + 1}.mp3\`);\\n      audio.preload = 'auto'; // Preload audio files\\n      audio.volume = volumeLevel; // Set initial volume\\n      return audio;\\n    });\\n    wrongSound = new AudioConstructor('/GameSounds/buzzer.mp3');\\n    wrongSound.preload = 'auto'; // Preload the wrong sound file\\n    wrongSound.volume = volumeLevel; // Set initial volume\\n  }\\n\\n  // Function to start the game\\n  const startGame = async () => {\\n    isActive = true;\\n    round = 0;\\n    sequence = [];\\n    userSequence = [];\\n    showStartButton = false;\\n    await wait(1000);\\n    nextRound();\\n  };\\n\\n  // Custom wait function using setTimeout\\n  const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));\\n\\n  // Function to generate a random box index\\n  const generateRandomBoxIndex = () => Math.floor(Math.random() * gridSize * gridSize);\\n\\n  // Function to start the next round\\n  const nextRound = async () => {\\n    round++;\\n    currentSoundIndex = 1; // Reset sound index to 1 for each new round\\n    if (round === 1) {\\n      // For the first round, generate only one box\\n      sequence = [generateRandomBoxIndex()];\\n      // Animate the first box for the first round\\n      await animateBox(sequence[0]);\\n    } else {\\n      // For subsequent rounds, replay the previous sequence and add a new box\\n      for (const boxIndex of sequence) {\\n        await animateBox(boxIndex);\\n      }\\n      // Add a new box for the current round\\n      sequence.push(generateRandomBoxIndex());\\n      // Animate the new box\\n      await animateBox(sequence[sequence.length - 1]);\\n    }\\n    isActive = true; // Allow user input after the sequence is shown\\n    userSequence = []; // Reset user sequence\\n  };\\n\\n  // Function to animate a box\\n  const animateBox = async (index) => {\\n    const box = document.querySelectorAll('.box')[index];\\n    box.style.backgroundColor = 'red';\\n    await wait(530); // Wait for 0.5 seconds\\n    box.style.backgroundColor = '#ccc'; // Reset the color after a delay\\n  };\\n\\n  // Function to handle box click\\n  const handleBoxClick = async (index) => {\\n    if (!isActive) return;\\n    userSequence.push(index);\\n    animateBox(index); // Highlight the clicked box\\n    await wait(33); // Add a slight delay before playing the sound\\n    playCorrectSound(); // Play correct sound\\n    if (userSequence.length === sequence.length) {\\n      checkSequence(); // Check if the user's sequence matches the game's sequence\\n    }\\n  };\\n\\n  // Function to handle keyboard events\\n  const handleKeyDown = (event, index) => {\\n    if (event.key === 'Enter') {\\n      handleBoxClick(index);\\n    }\\n  };\\n\\n  // Function to check if the user's sequence matches the game's sequence\\n  const checkSequence = () => {\\n    for (let i = 0; i < sequence.length; i++) {\\n      if (sequence[i] !== userSequence[i]) {\\n        endGame(); // End the game if the user's sequence does not match\\n        return;\\n      }\\n    }\\n    // If the sequence matches, proceed to the next round\\n    setTimeout(nextRound, 1500);\\n  };\\n\\n  // Function to end the game\\n  const endGame = () => {\\n    isActive = false;\\n    showStartButton = true;\\n    wrongSound.play(); // Play wrong sound\\n    alert('Game Over! You reached round ' + round);\\n  };\\n\\n  // Function to play the correct sound\\n  const playCorrectSound = () => {\\n    correctSounds[currentSoundIndex - 1].play(); // Play correct sound based on current sound index\\n    currentSoundIndex = (currentSoundIndex % maxSoundIndex) + 1; // Increment sound index and loop back to 1 if it exceeds maxSoundIndex\\n  };\\n\\n  // Function to toggle mute state\\n  const toggleMute = () => {\\n    isMuted = !isMuted;\\n    correctSounds.forEach(sound => sound.muted = isMuted);\\n    wrongSound.muted = isMuted;\\n  };\\n\\n  // Function to handle volume change\\n  const handleVolumeChange = (event) => {\\n    volumeLevel = event.target.value;\\n    correctSounds.forEach(sound => sound.volume = volumeLevel);\\n    wrongSound.volume = volumeLevel;\\n  };\\n\\n<\/script>\\n\\n<head>\\n  <title>Sequential Memory Game!</title>\\n  <meta name=\\"description\\" content=\\"Play the classic Simon Says clone online. Test your memory and reflexes by repeating a sequence of colors and sounds. Can you beat your high score?\\">\\n  <meta name=\\"keywords\\" content=\\"Simon Says, memory game, memory test, colors game, audio game, reflex game, sequence game, pattern game, online game, brain game\\">\\n  <meta name=\\"BC1337\\" content=\\"BC\\">\\n  <!-- Add more meta tags as needed -->\\n</head>\\n\\n<Layout>\\n  <h1 class=\\"text-3xl\\">Simon Says</h1>\\n  <div class=\\"game-container\\" role=\\"application\\">\\n    <div class=\\"game-controls\\" aria-label=\\"Game Controls\\">\\n      <div class=\\"volume-control\\" aria-label=\\"Volume Control\\">\\n        <input type=\\"range\\" min=\\"0\\" max=\\"1\\" step=\\"0.01\\" value={volumeLevel} on:input={handleVolumeChange} aria-label=\\"Volume Slider\\" />\\n      </div>\\n      <button class=\\"mute-button\\" on:click={toggleMute} aria-label=\\"{isMuted ? 'Unmute' : 'Mute'}\\">\\n        {#if isMuted}\\n          ðŸ”‡ <!-- Mute icon -->\\n        {:else}\\n          ðŸ”Š <!-- Speaker icon -->\\n        {/if}\\n      </button>\\n    </div>\\n    <div class=\\"game-board\\" role=\\"grid\\" aria-label=\\"Game Board\\">\\n      <div class=\\"box-container\\">\\n        {#each Array(gridSize * gridSize) as _, index}\\n          <div class=\\"box\\" role=\\"button\\" tabindex=\\"0\\" on:click={() => handleBoxClick(index)} on:keydown={(e) => handleKeyDown(e, index)} aria-label=\\"Clickable Box\\"></div>\\n        {/each}\\n      </div>\\n    </div>\\n    {#if showStartButton}\\n      <div class=\\"button-container\\">\\n        <button on:click={startGame} aria-label=\\"Start Game\\">Start Game</button>\\n      </div>\\n    {/if}\\n  </div>\\n</Layout>\\n\\n<style>\\n  h1 {\\n    color: #f0a500;\\n    text-align: center;\\n    margin-top: 20px;\\n  }\\n\\n  .game-container {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    padding: 20px;\\n  }\\n\\n  .game-controls {\\n    display: flex;\\n    align-items: center;\\n    margin-bottom: 20px;\\n  }\\n\\n  .volume-control {\\n    margin-right: 10px;\\n  }\\n\\n  .mute-button {\\n    background-color: transparent;\\n    border: none;\\n    font-size: 24px;\\n    cursor: pointer;\\n  }\\n\\n  .game-board {\\n    width: 100%;\\n    max-width: 400px;\\n    height: auto;\\n    display: flex;\\n    justify-content: center;\\n  }\\n\\n  .box-container {\\n    display: grid;\\n    grid-template-columns: repeat(5, 1fr);\\n    gap: 10px;\\n    width: 100%;\\n  }\\n\\n  .box {\\n    background-color: #ccc;\\n    border: 1px solid #888;\\n    cursor: pointer;\\n    transition: background-color 0.3s ease;\\n    width: 100%;\\n    padding-top: 100%; /* Maintain aspect ratio (square) */\\n  }\\n\\n  .box:hover {\\n    background-color: #ddd;\\n  }\\n\\n  .button-container {\\n    margin-top: 20px;\\n  }\\n\\n  button {\\n    padding: 10px 20px;\\n    font-size: 16px;\\n    border: none;\\n    background-color: #d8ead8;\\n    color: #f0a500;\\n    cursor: pointer;\\n    border-radius: 5px;\\n    transition: background-color 0.3s ease;\\n    margin-bottom: 10px;\\n  }\\n\\n  button:hover {\\n    background-color: rgb(241, 226, 205);\\n  }\\n</style>\\n"],"names":[],"mappings":"AAkME,gBAAG,CACD,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IACd,CAEA,6BAAgB,CACd,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IACX,CAEA,4BAAe,CACb,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,IACjB,CAEA,6BAAgB,CACd,YAAY,CAAE,IAChB,CAEA,0BAAa,CACX,gBAAgB,CAAE,WAAW,CAC7B,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,OACV,CAEA,yBAAY,CACV,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MACnB,CAEA,4BAAe,CACb,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,GAAG,CAAE,IAAI,CACT,KAAK,CAAE,IACT,CAEA,kBAAK,CACH,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,CACtC,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IACf,CAEA,kBAAI,MAAO,CACT,gBAAgB,CAAE,IACpB,CAEA,+BAAkB,CAChB,UAAU,CAAE,IACd,CAEA,oBAAO,CACL,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,OAAO,CACf,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,CACtC,aAAa,CAAE,IACjB,CAEA,oBAAM,MAAO,CACX,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CACrC"}`
};
const gridSize = 5;
const maxSoundIndex = 9;
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let AudioConstructor;
  if (typeof window !== "undefined") {
    AudioConstructor = window.Audio;
  }
  let wrongSound;
  let volumeLevel = 0.05;
  if (typeof window !== "undefined") {
    Array.from({ length: maxSoundIndex }, (_, i) => {
      const audio = new AudioConstructor(`/GameSounds/game${i + 1}.mp3`);
      audio.preload = "auto";
      audio.volume = volumeLevel;
      return audio;
    });
    wrongSound = new AudioConstructor("/GameSounds/buzzer.mp3");
    wrongSound.preload = "auto";
    wrongSound.volume = volumeLevel;
  }
  $$result.css.add(css);
  return `<head data-svelte-h="svelte-1v0jkvs"><title>Sequential Memory Game!</title> <meta name="description" content="Play the classic Simon Says clone online. Test your memory and reflexes by repeating a sequence of colors and sounds. Can you beat your high score?"> <meta name="keywords" content="Simon Says, memory game, memory test, colors game, audio game, reflex game, sequence game, pattern game, online game, brain game"> <meta name="BC1337" content="BC"> </head> ${validate_component(Layout, "Layout").$$render($$result, {}, {}, {
    default: () => {
      return `<h1 class="text-3xl svelte-auze6x" data-svelte-h="svelte-plc0mu">Simon Says</h1> <div class="game-container svelte-auze6x" role="application"><div class="game-controls svelte-auze6x" aria-label="Game Controls"><div class="volume-control svelte-auze6x" aria-label="Volume Control"><input type="range" min="0" max="1" step="0.01"${add_attribute("value", volumeLevel, 0)} aria-label="Volume Slider"></div> <button class="mute-button svelte-auze6x"${add_attribute("aria-label", "Mute", 0)}>${`ðŸ”Š `}</button></div> <div class="game-board svelte-auze6x" role="grid" aria-label="Game Board"><div class="box-container svelte-auze6x">${each(Array(gridSize * gridSize), (_, index) => {
        return `<div class="box svelte-auze6x" role="button" tabindex="0" aria-label="Clickable Box"></div>`;
      })}</div></div> ${`<div class="button-container svelte-auze6x"><button aria-label="Start Game" class="svelte-auze6x" data-svelte-h="svelte-14jnzox">Start Game</button></div>`}</div>`;
    }
  })}`;
});
export {
  Page as default
};
