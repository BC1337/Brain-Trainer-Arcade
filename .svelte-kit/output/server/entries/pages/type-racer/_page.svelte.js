import { c as create_ssr_component, o as onDestroy, v as validate_component, b as add_attribute, e as escape, d as each } from "../../../chunks/ssr.js";
import { L as Layout } from "../../../chunks/Layout.js";
const css = {
  code: '.wrapper.svelte-j8q603.svelte-j8q603{display:flex;justify-content:center;align-items:flex-start;min-height:100vh;box-sizing:border-box;padding:20px}.container.svelte-j8q603.svelte-j8q603{display:flex;flex-direction:column;justify-content:center;width:100%;max-width:600px;margin-top:0;padding:0;box-sizing:border-box}.card.svelte-j8q603.svelte-j8q603{width:100%;border:1px solid #ccc;border-radius:5px;box-shadow:0 0 10px rgba(57, 224, 239, 1.9);padding:20px;box-sizing:border-box}.type-racer.svelte-j8q603.svelte-j8q603{display:flex;flex-direction:column;align-items:center;padding:20px;font-family:Arial, sans-serif}.settings.svelte-j8q603.svelte-j8q603{margin-bottom:20px;color:#f0a500;display:flex;flex-direction:column;align-items:flex-start;background-color:#333;padding:15px;border-radius:5px}.settings.svelte-j8q603 label.svelte-j8q603{margin-bottom:5px}.settings.svelte-j8q603 input[type="number"].svelte-j8q603,.settings.svelte-j8q603 input[type="checkbox"].svelte-j8q603,.settings.svelte-j8q603 select.svelte-j8q603{margin-bottom:10px}.settings.svelte-j8q603 input[type="number"].svelte-j8q603{background-color:#666;color:white;border:1px solid #ccc;border-radius:3px;padding:5px}.settings.svelte-j8q603 select.svelte-j8q603{background-color:#666;color:white;border:1px solid #ccc;border-radius:3px;padding:5px}.instructions.svelte-j8q603.svelte-j8q603{margin-bottom:20px;color:#f0a500}.game-area.svelte-j8q603.svelte-j8q603{display:flex;flex-wrap:wrap;justify-content:center;gap:10px;margin-bottom:20px}.letter-box.svelte-j8q603.svelte-j8q603{width:40px;height:40px;background-color:#424242;display:flex;justify-content:center;align-items:center;border-radius:5px;font-size:20px}.correct.svelte-j8q603.svelte-j8q603{background-color:lightgreen}.incorrect.svelte-j8q603.svelte-j8q603{background-color:#ffcccc}.current.svelte-j8q603.svelte-j8q603{background-color:rgb(97, 178, 206)}.timer-bar.svelte-j8q603.svelte-j8q603{width:100%;height:20px;background-color:#f2f2f2;border-radius:5px;overflow:hidden}.timer-progress.svelte-j8q603.svelte-j8q603{height:100%;transition:width 1s linear;border-radius:5px}.timer.svelte-j8q603.svelte-j8q603{font-size:20px;color:#f0a500}.stats.svelte-j8q603.svelte-j8q603{color:#f0a500}button.svelte-j8q603.svelte-j8q603{padding:10px 20px;font-size:16px;background-color:#007bff;color:#fff;border:none;border-radius:5px;cursor:pointer}',
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount, onDestroy } from 'svelte';\\n    import Layout from '../../layouts/Layout.svelte';\\n\\n    let gameMode = 'letters'; // 'letters' or 'paragraphs'\\n    let letters = [];\\n    let currentIndex = 0;\\n    let timer = 15000; // Default timer in milliseconds (15 seconds)\\n    let interval;\\n    let gameActive = false;\\n    let numCharacters = 10; // Default number of characters to type\\n    let roundLength = 15; // Default round length in seconds\\n    let includeLetters = true;\\n    let includeNumbers = true;\\n    let includeSymbols = false;\\n    let caseSensitive = true; // By default, case sensitivity is enabled\\n    let correctLetters = 0;\\n    let totalTyped = 0;\\n\\n    function startGame() {\\n        if (gameMode === 'letters') {\\n            letters = generateLetters(numCharacters);\\n        }\\n\\n        currentIndex = 0;\\n        timer = roundLength * 1000; // Convert round length to milliseconds\\n        correctLetters = 0;\\n        totalTyped = 0;\\n        gameActive = true;\\n        interval = setInterval(() => {\\n            if (timer > 0) {\\n                timer -= 10; // Decrease timer by 10 milliseconds\\n            } else {\\n                endGame(\\"Time's up! Game over.\\");\\n            }\\n        }, 10); // Update every 10 milliseconds\\n    }\\n\\n    function generateLetters(numCharacters) {\\n        const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\\n        const lowercaseAlphabet = 'abcdefghijklmnopqrstuvwxyz';\\n        const numbers = '1234567890';\\n        const symbols = '!@#$%^&*()_+';\\n        let characters = '';\\n\\n        if (includeLetters) characters += alphabet;\\n        if (caseSensitive && includeLetters) characters += lowercaseAlphabet;\\n        if (includeNumbers) characters += numbers;\\n        if (includeSymbols) characters += symbols;\\n\\n        if (!characters) {\\n            alert(\\"Please select at least one character type.\\");\\n            return [];\\n        }\\n\\n        const generatedLetters = [];\\n        for (let i = 0; i < numCharacters; i++) {\\n            const randomIndex = Math.floor(Math.random() * characters.length);\\n            generatedLetters.push(characters[randomIndex]);\\n        }\\n        return generatedLetters;\\n    }\\n\\n    function handleKeyPress(event) {\\n        if (!gameActive) return; // Ignore key events if the game is not active\\n\\n        // Ignore modifier keys\\n        const ignoredKeys = ['Shift', 'Control', 'Alt', 'Meta', 'CapsLock', 'Tab', 'Escape'];\\n        if (ignoredKeys.includes(event.key)) return;\\n\\n        let pressedKey = event.key;\\n        if (!caseSensitive) {\\n            pressedKey = pressedKey.toUpperCase();\\n        }\\n\\n        if (letters[currentIndex] === pressedKey || (!caseSensitive && letters[currentIndex].toLowerCase() === pressedKey.toLowerCase())) {\\n            correctLetters++;\\n            currentIndex++;\\n            if (currentIndex === letters.length) {\\n                endGame(\\"Congratulations! You've won!\\");\\n            }\\n        } else {\\n            endGame(\\"Game over! You typed the wrong character.\\");\\n        }\\n        totalTyped++;\\n    }\\n\\n    function endGame(message) {\\n        clearInterval(interval);\\n        gameActive = false;\\n        alert(message);\\n    }\\n\\n    onMount(() => {\\n        if (typeof window !== 'undefined') {\\n            document.addEventListener('keydown', handleKeyPress);\\n        }\\n    });\\n\\n    onDestroy(() => {\\n        if (typeof window !== 'undefined') {\\n            document.removeEventListener('keydown', handleKeyPress);\\n        }\\n        clearInterval(interval);\\n    });\\n<\/script>\\n\\n<head>\\n    <title>Type Racer - Test Your Typing Speed!</title>\\n    <meta name=\\"description\\" content=\\"Challenge your typing skills with Type Racer! Compete against others in real-time typing races. Improve your typing speed and accuracy as you race against the clock.\\">\\n    <meta name=\\"keywords\\" content=\\"type racer, typing game, typing speed test, typing competition, keyboard game, typing challenge, online game, typing skills, typing practice\\">\\n    <meta name=\\"BC1337\\" content=\\"BC\\">\\n</head>\\n\\n<Layout>\\n    <div class=\\"wrapper\\">\\n        <div class=\\"container\\" role=\\"main\\">\\n            <div class=\\"card\\">\\n                <div class=\\"type-racer\\">\\n                    <div class=\\"settings\\">\\n                        <label for=\\"game-mode\\">Game Mode:</label>\\n                        <select id=\\"game-mode\\" bind:value={gameMode}>\\n                            <option value=\\"letters\\">Letters</option>\\n                        </select>\\n                        \\n                        {#if gameMode === 'letters'}\\n                            <label for=\\"num-characters\\">Number of Characters:</label>\\n                            <input type=\\"number\\" id=\\"num-characters\\" bind:value={numCharacters} min=\\"1\\" max=\\"30\\">\\n                        \\n                            <label>\\n                                <input type=\\"checkbox\\" bind:checked={includeLetters}>\\n                                Include Letters\\n                            </label>\\n                            \\n                            <label>\\n                                <input type=\\"checkbox\\" bind:checked={includeNumbers}>\\n                                Include Numbers\\n                            </label>\\n\\n                            <label>\\n                                <input type=\\"checkbox\\" bind:checked={includeSymbols}>\\n                                Include Symbols\\n                            </label>\\n                            \\n                            <label>\\n                                <input type=\\"checkbox\\" bind:checked={caseSensitive}>\\n                                Case Sensitive\\n                            </label>\\n                        {/if}\\n                    </div>\\n                    <div class=\\"instructions\\">\\n                        <p>Instructions: Type the {gameMode} as fast as you can!</p>\\n                    </div>\\n                    {#if gameMode === 'letters'}\\n                        <div class=\\"game-area\\" aria-live=\\"assertive\\" aria-label=\\"Type the following characters:\\">\\n                            {#each letters as letter, index}\\n                                <div\\n                                    class=\\"letter-box\\"\\n                                    class:correct={index < currentIndex}\\n                                    class:current={index === currentIndex}\\n                                    class:incorrect={\\n                                        index === currentIndex &&\\n                                        letters[currentIndex] !== undefined &&\\n                                        gameActive\\n                                    }>\\n                                    {letter}\\n                                </div>\\n                            {/each}\\n                        </div>\\n                    {/if}\\n                    {#if !gameActive}\\n                        <div class=\\"input-area\\">\\n                            <button on:click={startGame}>Start</button>\\n                        </div>\\n                    {/if}\\n                    <div class=\\"timer-bar\\" style=\\"margin-top: 10px;\\">\\n                        <div class=\\"timer-progress\\" style=\\"width: {((roundLength * 1000 - timer) / (roundLength * 10)).toFixed(3)}%; background-color: {timer > roundLength * 500 ? 'green' : (timer > roundLength * 250 ? 'yellow' : 'red')}\\"></div>\\n                    </div>\\n                    <div class=\\"timer\\" style=\\"margin-top: 10px;\\">Time: {Math.floor(timer / 1000)}s {(timer % 1000).toString().padStart(3, '0')}ms</div>\\n                    <div class=\\"stats\\" style=\\"margin-top: 10px;\\">\\n                        <div>Correct Letters: {correctLetters}</div>\\n                        <div>Accuracy: {(totalTyped > 0 ? (correctLetters / totalTyped * 100).toFixed(2) : 0)}%</div>\\n                        <div>Keys Per Minute: {(correctLetters / (roundLength / 60)).toFixed(2)}</div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</Layout>\\n\\n<style>\\n.wrapper {\\n    display: flex;\\n    justify-content: center;\\n    align-items: flex-start; /* Align items at the top */\\n    min-height: 100vh;\\n    box-sizing: border-box;\\n    padding: 20px;\\n}\\n\\n.container {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center; /* Center horizontally */\\n    width: 100%;\\n    max-width: 600px;\\n    margin-top: 0; /* Ensure it starts from the top */\\n    padding: 0;\\n    box-sizing: border-box;\\n}\\n\\n.card {\\n    width: 100%;\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    box-shadow: 0 0 10px rgba(57, 224, 239, 1.9);\\n    padding: 20px;\\n    box-sizing: border-box; /* Ensure padding is included in the width calculation */\\n}\\n\\n    .type-racer {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        padding: 20px;\\n        font-family: Arial, sans-serif;\\n    }\\n\\n    .settings {\\n        margin-bottom: 20px;\\n        color: #f0a500;\\n        display: flex;\\n        flex-direction: column;\\n        align-items: flex-start;\\n        background-color: #333;\\n        padding: 15px;\\n        border-radius: 5px;\\n    }\\n\\n    .settings label {\\n        margin-bottom: 5px;\\n    }\\n\\n    .settings input[type=\\"number\\"], .settings input[type=\\"checkbox\\"], .settings select {\\n        margin-bottom: 10px;\\n    }\\n\\n    .settings input[type=\\"number\\"] {\\n        background-color: #666;\\n        color: white;\\n        border: 1px solid #ccc;\\n        border-radius: 3px;\\n        padding: 5px;\\n    }\\n\\n    .settings select {\\n        background-color: #666;\\n        color: white;\\n        border: 1px solid #ccc;\\n        border-radius: 3px;\\n        padding: 5px;\\n    }\\n\\n    .instructions {\\n        margin-bottom: 20px;\\n        color: #f0a500;\\n    }\\n\\n    .game-area {\\n        display: flex;\\n        flex-wrap: wrap;\\n        justify-content: center;\\n        gap: 10px;\\n        margin-bottom: 20px;\\n    }\\n\\n    .letter-box {\\n        width: 40px;\\n        height: 40px;\\n        background-color: #424242;\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        border-radius: 5px;\\n        font-size: 20px;\\n    }\\n\\n    .correct {\\n        background-color: lightgreen;\\n    }\\n\\n    .incorrect {\\n        background-color: #ffcccc; /* Red background for incorrect letters */\\n    }\\n\\n    .current {\\n        background-color: rgb(97, 178, 206); /* Light blue background for the current letter */\\n    }\\n\\n    .timer-bar {\\n        width: 100%;\\n        height: 20px;\\n        background-color: #f2f2f2;\\n        border-radius: 5px;\\n        overflow: hidden;\\n    }\\n\\n    .timer-progress {\\n        height: 100%;\\n        transition: width 1s linear; /* Smooth transition animation */\\n        border-radius: 5px;\\n    }\\n\\n    .timer {\\n        font-size: 20px;\\n        color: #f0a500;\\n    }\\n\\n    .stats {\\n        color: #f0a500;\\n    }\\n\\n    button {\\n        padding: 10px 20px;\\n        font-size: 16px;\\n        background-color: #007bff;\\n        color: #fff;\\n        border: none;\\n        border-radius: 5px;\\n        cursor: pointer;\\n    }\\n</style>"],"names":[],"mappings":"AA+LA,oCAAS,CACL,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,UAAU,CACvB,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,IACb,CAEA,sCAAW,CACP,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,CAAC,CACb,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,UAChB,CAEA,iCAAM,CACF,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC5C,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,UAChB,CAEI,uCAAY,CACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,KAAK,CAAC,CAAC,UACxB,CAEA,qCAAU,CACN,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,UAAU,CACvB,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GACnB,CAEA,uBAAS,CAAC,mBAAM,CACZ,aAAa,CAAE,GACnB,CAEA,uBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,eAAC,CAAE,uBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,eAAC,CAAE,uBAAS,CAAC,oBAAO,CAC/E,aAAa,CAAE,IACnB,CAEA,uBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,eAAE,CAC3B,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GACb,CAEA,uBAAS,CAAC,oBAAO,CACb,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GACb,CAEA,yCAAc,CACV,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,OACX,CAEA,sCAAW,CACP,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,MAAM,CACvB,GAAG,CAAE,IAAI,CACT,aAAa,CAAE,IACnB,CAEA,uCAAY,CACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,IACf,CAEA,oCAAS,CACL,gBAAgB,CAAE,UACtB,CAEA,sCAAW,CACP,gBAAgB,CAAE,OACtB,CAEA,oCAAS,CACL,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CACtC,CAEA,sCAAW,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,QAAQ,CAAE,MACd,CAEA,2CAAgB,CACZ,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CAAC,EAAE,CAAC,MAAM,CAC3B,aAAa,CAAE,GACnB,CAEA,kCAAO,CACH,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OACX,CAEA,kCAAO,CACH,KAAK,CAAE,OACX,CAEA,kCAAO,CACH,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,OACZ"}`
};
let roundLength = 15;
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let gameMode = "letters";
  let letters = [];
  let currentIndex = 0;
  let timer = 15e3;
  let interval;
  let gameActive = false;
  let numCharacters = 10;
  let includeLetters = true;
  let includeNumbers = true;
  let includeSymbols = false;
  let caseSensitive = true;
  let correctLetters = 0;
  function handleKeyPress(event) {
    return;
  }
  onDestroy(() => {
    if (typeof window !== "undefined") {
      document.removeEventListener("keydown", handleKeyPress);
    }
    clearInterval(interval);
  });
  $$result.css.add(css);
  return `<head data-svelte-h="svelte-sd9n5m"><title>Type Racer - Test Your Typing Speed!</title> <meta name="description" content="Challenge your typing skills with Type Racer! Compete against others in real-time typing races. Improve your typing speed and accuracy as you race against the clock."> <meta name="keywords" content="type racer, typing game, typing speed test, typing competition, keyboard game, typing challenge, online game, typing skills, typing practice"> <meta name="BC1337" content="BC"></head> ${validate_component(Layout, "Layout").$$render($$result, {}, {}, {
    default: () => {
      return `<div class="wrapper svelte-j8q603"><div class="container svelte-j8q603" role="main"><div class="card svelte-j8q603"><div class="type-racer svelte-j8q603"><div class="settings svelte-j8q603"><label for="game-mode" class="svelte-j8q603" data-svelte-h="svelte-65r1h3">Game Mode:</label> <select id="game-mode" class="svelte-j8q603"><option value="letters" data-svelte-h="svelte-5q3ano">Letters</option></select> ${`<label for="num-characters" class="svelte-j8q603" data-svelte-h="svelte-166o661">Number of Characters:</label> <input type="number" id="num-characters" min="1" max="30" class="svelte-j8q603"${add_attribute("value", numCharacters, 0)}> <label class="svelte-j8q603"><input type="checkbox" class="svelte-j8q603"${add_attribute("checked", includeLetters, 1)}>
                                Include Letters</label> <label class="svelte-j8q603"><input type="checkbox" class="svelte-j8q603"${add_attribute("checked", includeNumbers, 1)}>
                                Include Numbers</label> <label class="svelte-j8q603"><input type="checkbox" class="svelte-j8q603"${add_attribute("checked", includeSymbols, 1)}>
                                Include Symbols</label> <label class="svelte-j8q603"><input type="checkbox" class="svelte-j8q603"${add_attribute("checked", caseSensitive, 1)}>
                                Case Sensitive</label>`}</div> <div class="instructions svelte-j8q603"><p>Instructions: Type the ${escape(gameMode)} as fast as you can!</p></div> ${`<div class="game-area svelte-j8q603" aria-live="assertive" aria-label="Type the following characters:">${each(letters, (letter, index) => {
        return `<div class="${[
          "letter-box svelte-j8q603",
          (index < currentIndex ? "correct" : "") + " " + (index === currentIndex ? "current" : "") + " " + (index === currentIndex && letters[currentIndex] !== void 0 && gameActive ? "incorrect" : "")
        ].join(" ").trim()}">${escape(letter)} </div>`;
      })}</div>`} ${`<div class="input-area"><button class="svelte-j8q603" data-svelte-h="svelte-1kbts0g">Start</button></div>`} <div class="timer-bar svelte-j8q603" style="margin-top: 10px;"><div class="timer-progress svelte-j8q603" style="${"width: " + escape(((roundLength * 1e3 - timer) / (roundLength * 10)).toFixed(3), true) + "%; background-color: " + escape(
        "green",
        true
      )}"></div></div> <div class="timer svelte-j8q603" style="margin-top: 10px;">Time: ${escape(Math.floor(timer / 1e3))}s ${escape((timer % 1e3).toString().padStart(3, "0"))}ms</div> <div class="stats svelte-j8q603" style="margin-top: 10px;"><div>Correct Letters: ${escape(correctLetters)}</div> <div>Accuracy: ${escape(0)}%</div> <div>Keys Per Minute: ${escape((correctLetters / (roundLength / 60)).toFixed(2))}</div></div></div></div></div></div>`;
    }
  })}`;
});
export {
  Page as default
};
