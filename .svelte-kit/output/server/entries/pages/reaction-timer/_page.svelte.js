import { c as create_ssr_component, v as validate_component, d as each, e as escape } from "../../../chunks/ssr.js";
import { L as Layout } from "../../../chunks/Layout.js";
const css = {
  code: ".center-container.svelte-tozgs1.svelte-tozgs1{display:flex;justify-content:center;align-items:center;height:calc(100vh - 50px)}.game-container.svelte-tozgs1.svelte-tozgs1{position:relative;display:flex;align-items:center;flex-direction:column}.game-title.svelte-tozgs1.svelte-tozgs1{margin-bottom:20px;text-align:center;color:#f0a500}.game-title.svelte-tozgs1 h1.svelte-tozgs1{margin:0;font-size:2em}.game-description.svelte-tozgs1.svelte-tozgs1{margin-bottom:20px;text-align:center;color:grey}.start-game-modal.svelte-tozgs1.svelte-tozgs1{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);color:white}.start-game-modal.svelte-tozgs1 button.svelte-tozgs1{padding:15px 25px;font-size:1.5em;background-color:#3f51b5;color:white;border:none;border-radius:5px;cursor:pointer;transition:background-color 0.3s ease}.start-game-modal.svelte-tozgs1 button.svelte-tozgs1:hover{background-color:#303f9f}.play-area-container.svelte-tozgs1.svelte-tozgs1{position:relative}.play-area.svelte-tozgs1.svelte-tozgs1{width:300px;height:300px;border:2px solid #3f51b5;cursor:pointer}.timer-stats.svelte-tozgs1.svelte-tozgs1{flex:1;padding:10px}.stats-container.svelte-tozgs1.svelte-tozgs1{display:flex;justify-content:space-between}.high-scores.svelte-tozgs1.svelte-tozgs1{flex:1}.high-scores.svelte-tozgs1 h2.svelte-tozgs1{font-size:1.5em;margin-bottom:10px;color:#f0a500}.early-click-alert.svelte-tozgs1.svelte-tozgs1{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);background-color:#f44336;padding:20px;border-radius:10px;font-size:1.2em;color:white;box-shadow:0 2px 5px rgba(0, 0, 0, 0.2)}.early-click-alert.svelte-tozgs1 p.svelte-tozgs1{margin:0;font-weight:bold}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- src/routes/ReactionTime.svelte -->\\n<script>\\n    import Layout from '../../layouts/Layout.svelte';\\n    import { onMount } from 'svelte';\\n\\n    let gameState = 'preGame';\\n    let playAreaColor = 'red';\\n    let startTime;\\n    let endTime;\\n    let attempts = [];\\n    let highScores = [];\\n    let showEarlyClickAlert = false;\\n    let timerId;\\n\\n    function startGame() {\\n        gameState = 'inGame';\\n        playAreaColor = 'red'; // Reset play area color\\n        startTime = null;\\n        endTime = null;\\n        attempts = [];\\n        showEarlyClickAlert = false; // Hide the alert\\n        clearTimeout(timerId); // Clear any existing timer\\n        timerId = setTimeout(() => {\\n            playAreaColor = 'green';\\n            startTime = Date.now(); // Start tracking response time\\n            console.log('Game started. Start time:', startTime);\\n        }, Math.random() * 5000 + 4000); // Random wait time between 4 to 9 seconds\\n    }\\n\\n    function handleClick() {\\n        if (gameState === 'inGame' && playAreaColor === 'green') {\\n            endTime = Date.now();\\n            const responseTime = endTime - startTime;\\n            attempts = [...attempts, responseTime]; // Update attempts array\\n            highScores = [...highScores, responseTime]; // Update highScores array\\n            attempts = attempts.slice(-5); // Keep only the last 5 attempts\\n            highScores.sort((a, b) => a - b); // Sort the high scores in ascending order\\n            highScores = highScores.slice(0, 5); // Keep only the top 5 high scores\\n            gameState = 'preGame';\\n            console.log('Clicked. Response time:', responseTime);\\n        } else if (gameState === 'inGame' && playAreaColor === 'red') {\\n            showEarlyClickAlert = true; // Show the alert if clicked too early\\n            clearTimeout(timerId); // Reset the timer\\n            timerId = setTimeout(() => {\\n                playAreaColor = 'green'; // Restart the timer\\n                startTime = Date.now();\\n                console.log('Game started. Start time:', startTime);\\n                showEarlyClickAlert = false; // Hide the alert\\n            }, Math.random() * 5000 + 4000);\\n        }\\n    }\\n\\n    onMount(() => {\\n        console.log('Component mounted');\\n    });\\n<\/script>\\n\\n<head>\\n    <title>Reaction Timer!</title>\\n    <meta name=\\"description\\" content=\\"Test your reaction time with this online game. Click the button as quickly as possible when the countdown reaches zero. Challenge your friends and see who has the fastest reflexes!\\">\\n    <meta name=\\"keywords\\" content=\\"reaction timer, reaction game, reflex game, online game, timer game, reflex test, reaction speed, challenge game\\">\\n    <meta name=\\"BC1337\\" content=\\"BC\\">\\n    <!-- Add more meta tags as needed -->\\n</head>  \\n\\n<Layout>\\n    <main aria-labelledby=\\"game-title\\">\\n        <div class=\\"center-container\\">\\n            <section class=\\"game-container\\">\\n                <div class=\\"game-title\\" id=\\"game-title\\">\\n                    <h1>Reaction Trainer</h1>\\n                </div>\\n                <div class=\\"game-description\\">\\n                    <p>Click start, wait for the red box to turn green and don't click too early!</p>\\n                </div>\\n                <div class=\\"play-area-container\\">\\n                    {#if gameState === 'preGame'}\\n                        <div class=\\"start-game-modal\\">\\n                            <button on:click={startGame}>Start Game</button>\\n                        </div>\\n                    {/if}\\n                    <canvas class=\\"play-area\\" style=\\"background-color: {playAreaColor}\\" on:click={handleClick}></canvas>\\n                    {#if showEarlyClickAlert}\\n                        <div class=\\"early-click-alert\\" aria-live=\\"assertive\\">\\n                            <p>You clicked too early! Wait for the green color.</p>\\n                        </div>\\n                    {/if}\\n                </div>\\n                <div class=\\"timer-stats\\">\\n                    <div class=\\"stats-container\\">\\n                        <div class=\\"high-scores white\\" aria-labelledby=\\"high-scores-title\\">\\n                            <h2 id=\\"high-scores-title\\">High Scores:</h2>\\n                            <ol>\\n                                {#each highScores as score, index}\\n                                    <li>{index + 1}. {score} milliseconds</li>\\n                                {/each}\\n                            </ol>\\n                        </div>\\n                    </div>\\n                </div>\\n            </section>\\n        </div>\\n    </main>\\n</Layout>\\n\\n\\n<style>\\n    .center-container {\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        height: calc(100vh - 50px); /* Adjusted height */\\n    }\\n\\n    .game-container {\\n        position: relative;\\n        display: flex; /* Make the game container flex */\\n        align-items: center; /* Center the contents vertically */\\n        flex-direction: column; /* Stack children vertically */\\n    }\\n\\n    .game-title {\\n        margin-bottom: 20px;\\n        text-align: center;\\n        color: #f0a500;\\n    }\\n\\n    .game-title h1 {\\n        margin: 0;\\n        font-size: 2em;\\n    }\\n\\n    .game-description {\\n        margin-bottom: 20px;\\n        text-align: center;\\n        color: grey;\\n    }\\n\\n    .start-game-modal {\\n        position: absolute;\\n        top: 50%;\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n        color: white;\\n    }\\n\\n    .start-game-modal button {\\n        padding: 15px 25px;\\n        font-size: 1.5em;\\n        background-color: #3f51b5;\\n        color: white;\\n        border: none;\\n        border-radius: 5px;\\n        cursor: pointer;\\n        transition: background-color 0.3s ease;\\n    }\\n\\n    .start-game-modal button:hover {\\n        background-color: #303f9f;\\n    }\\n\\n    .play-area-container {\\n        position: relative;\\n    }\\n\\n    .play-area {\\n        width: 300px;\\n        height: 300px;\\n        border: 2px solid #3f51b5;\\n        cursor: pointer;\\n    }\\n\\n    .timer-stats {\\n        flex: 1; /* Take up remaining space */\\n        padding: 10px;\\n    }\\n\\n    .stats-container {\\n        display: flex;\\n        justify-content: space-between;\\n    }\\n\\n    .high-scores {\\n        flex: 1;\\n    }\\n\\n    .high-scores h2 {\\n        font-size: 1.5em;\\n        margin-bottom: 10px;\\n        color: #f0a500;/* Set the text color using a CSS variable */\\n    }\\n\\n    .high-scores p {\\n        font-size: 1.2em;\\n        margin: 5px 0;\\n        color: #989191;\\n    }\\n\\n    .early-click-alert {\\n        position: absolute;\\n        top: 50%;\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n        background-color: #f44336;\\n        padding: 20px;\\n        border-radius: 10px;\\n        font-size: 1.2em;\\n        color: white;\\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\\n    }\\n\\n    .early-click-alert p {\\n        margin: 0;\\n        font-weight: bold;\\n    }\\n</style>\\n"],"names":[],"mappings":"AA2GI,6CAAkB,CACd,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAC7B,CAEA,2CAAgB,CACZ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,MACpB,CAEA,uCAAY,CACR,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,OACX,CAEA,yBAAW,CAAC,gBAAG,CACX,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,GACf,CAEA,6CAAkB,CACd,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,IACX,CAEA,6CAAkB,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,KAAK,CAAE,KACX,CAEA,+BAAiB,CAAC,oBAAO,CACrB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,SAAS,CAAE,KAAK,CAChB,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,gBAAgB,CAAC,IAAI,CAAC,IACtC,CAEA,+BAAiB,CAAC,oBAAM,MAAO,CAC3B,gBAAgB,CAAE,OACtB,CAEA,gDAAqB,CACjB,QAAQ,CAAE,QACd,CAEA,sCAAW,CACP,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,MAAM,CAAE,OACZ,CAEA,wCAAa,CACT,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,IACb,CAEA,4CAAiB,CACb,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aACrB,CAEA,wCAAa,CACT,IAAI,CAAE,CACV,CAEA,0BAAY,CAAC,gBAAG,CACZ,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,OACX,CAQA,8CAAmB,CACf,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAC3C,CAEA,gCAAkB,CAAC,eAAE,CACjB,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,IACjB"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let playAreaColor = "red";
  let highScores = [];
  $$result.css.add(css);
  return `  <head data-svelte-h="svelte-1sh413l"><title>Reaction Timer!</title> <meta name="description" content="Test your reaction time with this online game. Click the button as quickly as possible when the countdown reaches zero. Challenge your friends and see who has the fastest reflexes!"> <meta name="keywords" content="reaction timer, reaction game, reflex game, online game, timer game, reflex test, reaction speed, challenge game"> <meta name="BC1337" content="BC"> </head> ${validate_component(Layout, "Layout").$$render($$result, {}, {}, {
    default: () => {
      return `<main aria-labelledby="game-title"><div class="center-container svelte-tozgs1"><section class="game-container svelte-tozgs1"><div class="game-title svelte-tozgs1" id="game-title" data-svelte-h="svelte-ozrnka"><h1 class="svelte-tozgs1">Reaction Trainer</h1></div> <div class="game-description svelte-tozgs1" data-svelte-h="svelte-4apzz0"><p>Click start, wait for the red box to turn green and don&#39;t click too early!</p></div> <div class="play-area-container svelte-tozgs1">${`<div class="start-game-modal svelte-tozgs1"><button class="svelte-tozgs1" data-svelte-h="svelte-uj7ase">Start Game</button></div>`} <canvas class="play-area svelte-tozgs1" style="${"background-color: " + escape(playAreaColor, true)}"></canvas> ${``}</div> <div class="timer-stats svelte-tozgs1"><div class="stats-container svelte-tozgs1"><div class="high-scores white svelte-tozgs1" aria-labelledby="high-scores-title"><h2 id="high-scores-title" class="svelte-tozgs1" data-svelte-h="svelte-1n3hrge">High Scores:</h2> <ol>${each(highScores, (score, index) => {
        return `<li>${escape(index + 1)}. ${escape(score)} milliseconds</li>`;
      })}</ol></div></div></div></section></div></main>`;
    }
  })}`;
});
export {
  Page as default
};
